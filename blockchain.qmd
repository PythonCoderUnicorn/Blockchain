
# Blockchain 101

Blockchain is all about decentralization, which is used in **web3** technology.

- **Blockchain** = a network of computers all hosting, maintaining and creating new "blocks" pf data that are all chained together using cryptography 
(which is a immutable ledger). 

- **Consensus Mechanism** = the mechanism by which all the different computers in the blockchain network, nodes, come to agree on what data the ledger contains.

- **PoW** = proof of work consensus mechanism, Bitcoin consenus mechanism.
Computers doing a massive amout of cryptographic work in order to potentially win a chance at mining the next block, earning a block reward. 

- **PoS** = proof of stake consensus mechanism, Etherium's consensus mechanism.
Participants staking their tokens, native currency of the network in exchange for a chance to mine the next block , earning a reward. 

- **Dapp** = decentralized app, piece of software that has at least some decentralized component. 

- **layers** = different blockchains and systems that run on top of a base blockchain in order to unlock or improve existing functionality that may not be possible on the base layer.


## Blockchain uses

Everything is transparent, verifiable, and decentralized.

- money
- smart contracts
- DeFi (decentralized finance)
- NFT (non-fungible tokens)
- DAO (decentralized autonomous org)

**Smart contracts** are pieces of code that are deployed to the blockchain via a ledger system. Like a Bitcoin transaction, smart contract code gets deployed and recorded to the blockchain for all to see forever. 



## Decentralization 

In a decentralized (or distributed) system, the code is running across a collection of computers all owned by individual entities. This network is usually open for anyone to join and participate in running a node.

A peer-2-peer network is a collection of different people running file hosting servers. With this model, if we want to download a file, we can download it from any of the servers in the network that host it. 
P2P networks are ephemeral and don’t have a global state record, whereas blockchains do.



## Usefulness/ Benefits

- security = security from the cryptography and generating secure
identity and suer management

- transparency = blockchains are open (open network, open nodes where verification takes place == decentralized)

- permanence = ledgers in the blockchain are permanent


> in blockchain, we don't want duplicated transactions, hence the distributed ledger (network wide)



## Blockchain Anatomy

Each blockchain network works a bit differently PoW vs PoS. 
Blockchain functionality is blocks, nodes, and miners. 

### Blocks

blocks are the chunks of data that make up the blockchain.
A blockchain as a chain of blocks of data connected to each 
other via their timestamps and hashes of their data.

- `data` = data contained in and written to the block
- `nonce` = a randomly generated 32-bit integer that makes a block header hash
- `hash` = a 256-but integer that is connected to the nonce

1. blockchain created
2. nonce generates a hash


### Nodes

Nodes must have the ledger watched and verified by copious distributed computers,
each computer is a `node`. Nodes only hold a copy of the existing blockchain, miners are the ones who add blocks.

- Each node is responsible for independently approving each new block that gets mined. - The whole network of nodes must approve a block for it to be successfully mined. 

### Miners

Miners are in charge of creating new blocks on the blockchain. 
Every block has its own nonce and hash, but every block also 
references the previous block’s hash. 

PoW system: mining is using software to brute frce guess the correct nonce to match the correct hash, going through 4 billion permutations. Finding the correct nonce == 'proof of work'.

When miners submit a nonce, it gets run through a cryptography function that will output a hash. Only when a miner gets the hash correct do they get to mine the next block.



## Transaction

Bitcoin transaction happens, it is shared 1 by 1 through each node on the network

Example: purchase item 1 and then same Bitcoin used to buy item 2.
The miner (out of so many) that solves the puzzle gets to write the 
new data and the competing transaction (item 2) would be dropped. 
Once the correct nonce is found and the hash matched, 
the miner writes the block, its data, and its header hash to the chain, 
and the change is accepted by all the nodes in the network.



## Consensus Mechanism (CM)

The mining process requires miners to perform work using an external resource (energy) to actually “mine” and create new units of cryptocurrency. 

- PoW : CM relies on external input {energy} ==> new_Bitcoin. Large amount of energy needed (a feature not a bug) to solve a cryptographic puzzle. 

    - in PoW, the higher your hashrate (a measure of computing power), the higher your likelihood of being able to mine a new block.

- PoS : validator nodes lock up a specific amount of tokens to win a
chance at proposing & validating new blocks. Etherium, Solana, Avalanche etc use this model.

    - in PoS, the more validating of legit transactions the more likelihood of being able to mine a new block. 
    
    - Dishonesty (writing fraudulent blocks to the chain) is punished, tokens slashed or burned


- PoX : Proof of Transfer is a CM unique to the Stacks blockchain. It is layer 2 of the PoW model. 

    - Pox Stacks miners commit Bitcoin for a chance at mining a block. Stacks can recycle the energy used to mine Bitcoin and unlock Bitcoin's potential as productive asset.

- PoB : proof of burn, asset is destroyed instead of transferred, energy is used

- PoH : proof of history uses validator nodes to quickly verify that a transaction occurred between 2 specific points in the blockchain. Fast verification, allows for multiple parts of the chain to be verified at any time. 

- PoSp : proof of space, a method for users to prove they are keeping unused space on a hard drive in reserve for network storage. 

    - A cryptographic collection of numbers is stored on a user’s disk and these represent plots: a special unit of storage. The users with the largest number of plots available have the highest chance of winning the next block.

- PoA : proof of access uses Arweave protocol. Not a block_chain_ but block_weave_, where each block is linked to multiple previous blocks. Incentive is to make space available, permanent decentralized storage for a token reward. 


## Blockchains 

comparing three of the biggest chains: Bitcoin, Ethereum, and Solana, and how they 
handle security and user experience. 

- Bitcoin: uses the PoW model, designed to make gaining money difficult with its historical ledger being immutable. It is as fast as the slowest node in network.

    - Cons = inefficient, slow and uses lots of energy, no smart contracts
    - Pros = secure decentralization

- Solana: designed for speed and user experience which uses proof of history CM

    - Cons = higher requirements to run a Solana node, centralized, less secure
    - Pros = user experience

- Etherium: uses proof of stake for efficiency and energy use. 

    - Cons = more you accumulate the more influence, similar to centralized banks
    - Pros = easier on energy use



## Smart Contracts

smart contracts are chunks of code that live on the blockchain. If we think of a backend server with code running on it, smart contracts are very similar. The main difference is that smart contracts are publicly accessible and immutable.

    - Smart contracts are written in Solidity and Clarity which have access control functionaility for security. Viewable by anyone but need crypto to (partially) modify. 

When we write a smart contract and deploy it to a blockchain, we are initiating a transaction to write that data to the blockchain. Then anybody can call that smart contract and interact with it. This contract inital code can't be modified, only the data is modified. 

- smart contract > data modified (permanent) > blockchain updates

- Uses in finance, gaming, legal, real estate, corporate structure

- decentralized finance relies heavily on secure code written by the developers and that if something goes wrong there is no help.


>  There is a saying in the blockchain world: “Code is law.” This means that whatever the code says, goes.

- [Decentralized Application Security Project](http://dasp.co/)

### Reentrancy 

Reentrancy is a smart contract vulnerability, it happens when 
when external contract calls are allowed to make calls to the 
caller contract before execution finishes.

- a hack attack in which the hacker was able to call a function to allocate funds to a newly created DAO over and over again before the ledger of token ownership was updated.




## Languages

Smart contract languages, 3 most common ones are Solidity, Clarity and Rust. 

- Solidity : used on the Etherium chain (and others), most common language and is
similar to JavaScript. 

    - [Solidity GitHub](https://github.com/ethereum/solidity#example)
    - object oriented code which could have implicit functions leaving vulnerabilities like reentrancy attacks
    - Turing complete makes for complex debugging
    - popular in market but losing due to vulnerabilities

- Clarity : designed to be safe, secure and easy for developers. 

    - [Clarity GitHub](https://github.com/clarity-lang/overview/blob/master/tutorial-hello-world.md)
    - no looping is permitted , prevents halting issues (used in DDOS attacks)
    - reentrancy is prohibited
    - not object oriented

- Rust : very popular language, used on Solana. 





## Non-Fungible Tokens (NFTs)

NFTs are records of ownership of a unique asset, 
Bitcoins are not unique (fungible).

- art NFT for profiles ( bored apes )
- utility NFT, grants access to software


Building NFTs :

- token name, the name for the NFT collection
- token ID, identifier that is unique to each NFT
- token url, data that defines a token's traits
- owner, address of the NFT owner
- mint, a function responsible for allowinga a user to mint a NFT
- transfer, a function allowing NFT transfers between users
- burn, a function to permanently destroy a NFT

### NFTs on the blockchain market

- Etherium uses ERC-721 token standard to define NFTs, it uses OpenZeppelin.

- Bitcoin, need to use Stacks chain and Clarity language to create NFT that can go on Bitcoin. Stacks’ version of NFT standard implementation, the SIP-009 trait. SIPs are Stacks Improvement Proposals.

- Solana NFTs are fast due to using Metaplex stroefront, which creates & mints NFTs.






## DAOs

Decentralized autonomous organizations (DAOs) are essentially a series of smart contracts, but with a lot of thought put into how the group of people participating make decisions. In a DAO, decisions are made as a community and votes are recorded on-chain for transparency, verifiability, and immutability.

- voting process
- treasury management

Each memeber user of the DAO has a governance token and a threshold of votes are required to be met before anything changes. NFTs and DAOs can be used together to track membership.

- DAOs are new, often lack leadership, can be difficult to manage

- [create your own DAO](https://daohaus.club/)
- [MolochDAO - no code tool](https://molochdao.com/)
- [RaidGuild - multi step process to join](https://www.raidguild.org/)




## Dapp

A Decentralized Application (Dapp) is essentially an application that has at least one component hosted on a decentralized architecture. 
Dapps exist on a spectrum. 

- [browse dapps that exist](https://dappradar.com/)

- Uniswap : decentralized exchange create a liquidity pol for different tokens, users add their tokens to the pool in exchange for a yeild on that token, and user swap their tokens by depositing 1 in the pool and taking from another pool.

- Gamma : NFT marketplace

- Grape protocol built with Solana to create & manage DAOs

### web2 vs web3

App idea is called Cheddar, it is online retail for digital products.

- Web2: Web applications that are built on architecture that is owned and controlled by a single entity.

- Web3: Web applications that are built on architecture that is distributed among a decentralized network of entities.

At the heart of web3 development is the concept of recreating web2 web applications on top of decentralized blockchain architecture.

- web2 has client, server and database. The tech stack has: font end, API (auth, database, file storage), hosting, payments

- web3 tech stack has font end, API (data from smart contracts & blockchain), authentication (Metamask, Hiro or Phantom software used), database (data storage in smart contracts and decnetralized storage), file storage (decentralized), hosting (IPFS or Arweave), payments (on-chain payments)









